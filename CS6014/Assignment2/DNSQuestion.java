package MSDNS;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Objects;

public class DNSQuestion {
    String[] qName_;
    private int qType_, qClass_;

    /**
     * read a question from the input stream
     * @return question
     */
    public static DNSQuestion decodeQuestion(InputStream inputStream, DNSMessage message) throws IOException {
        DNSQuestion question = new DNSQuestion();
        ByteArrayInputStream byteArrayInputStream = (ByteArrayInputStream) inputStream;

        question.qName_ = message.readDomainName(inputStream);
        question.qType_ = DNSMessage.getByteGroup(2, byteArrayInputStream);
        question.qClass_ = DNSMessage.getByteGroup(2, byteArrayInputStream);

        return question;
    }

    /**
     * write the question bytes which will be sent to the client
     */
    public void writeBytes(ByteArrayOutputStream byteArrayOutputStream,
                           HashMap<String, Integer> domainLocations) throws IOException {
        DNSMessage.writeDomainName(byteArrayOutputStream, domainLocations, qName_);
        byteArrayOutputStream.write(DNSMessage.intToByteArray(qType_));
        byteArrayOutputStream.write(DNSMessage.intToByteArray(qClass_));
    }

    /**
     * autogenerated by IDE
     * @return a human-readable string version of a header object
     */
    @Override
    public String toString() {
        return "DNSQuestion{" + "qName=" + Arrays.toString(qName_) +
                ", qType=" + qType_ + ", qClass=" + qClass_ + '}';
    }

    /**
     * autogenerated by IDE
     * @return if two questions are equal
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        DNSQuestion rhs = (DNSQuestion) o;

        return qType_ == rhs.qType_ && qClass_ == rhs.qClass_ &&
               Arrays.equals(qName_, rhs.qName_);
    }

    /**
     * autogenerated by IDE
     * @return hashCode
     */
    @Override
    public int hashCode() {
        int result = Objects.hash(qType_, qClass_);
        result = 31 * result + Arrays.hashCode(qName_);

        return result;
    }
}