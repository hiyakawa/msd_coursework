package MSDNS;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.Calendar;
import java.util.HashMap;

public class DNSRecord {
    private int type_, rClass_, ttl_, rLength_;
    private byte[] rData_;
    private String[] name_;
    private Calendar expireTime_;

    /**
     * @return decoded record
     */
    public static DNSRecord decodeRecord(InputStream inputStream, DNSMessage message) throws IOException {
        DNSRecord record = new DNSRecord();
        ByteArrayInputStream byteArrayInputStream = (ByteArrayInputStream) inputStream;

        record.name_ = message.readDomainName(inputStream);
        record.type_ = DNSMessage.getByteGroup(2, byteArrayInputStream);
        record.rClass_ = DNSMessage.getByteGroup(2, byteArrayInputStream);
        record.ttl_ = DNSMessage.getByteGroup(4, byteArrayInputStream);
        record.rLength_ = DNSMessage.getByteGroup(2, byteArrayInputStream);
        record.rData_ = new byte[record.rLength_];

        for (int i = 0; i < record.rLength_; i++) {
            record.rData_[i] = (byte) inputStream.read();
        }

        record.expireTime_ = Calendar.getInstance();
        record.expireTime_.add(Calendar.SECOND, record.ttl_);

        return record;
    }

    /**
     * write answers
     */
    public void writeBytes(ByteArrayOutputStream byteArrayOutputStream,
                           HashMap<String, Integer> domainLocations) {
        DNSMessage.writeDomainName(byteArrayOutputStream, domainLocations, name_);

        writeAnswer(2, type_, byteArrayOutputStream);
        writeAnswer(2, rClass_, byteArrayOutputStream);
        writeAnswer(4, ttl_, byteArrayOutputStream);
        writeAnswer(2, rLength_, byteArrayOutputStream);

        for (byte b : rData_) {
            byteArrayOutputStream.write(b);
        }
    }

    /**
     * autogenerated by IDE
     * @return a human-readable string version of a header object
     */
    @Override
    public String toString() {
        return "DNSRecord{" + "name=" + Arrays.toString(name_) + ", type=" + type_ +
                ", rClass=" + rClass_ + ", ttl=" + ttl_ + ", rLength=" + rLength_ +
                ", rData=" + Arrays.toString(rData_) + '}';
    }

    /**
     * @return whether the creation date + the time to live is after the current time
     */
    public boolean isExpired() {
        return Calendar.getInstance().after(expireTime_);
    }

    public static void writeAnswer(int numBytes, int input,
                                   ByteArrayOutputStream byteArrayOutputStream) {
        byte temp[] = new byte[numBytes];

        for (int i = numBytes - 1; i >= 0; i--) {
            temp[i] = (byte) input;
            input >>= 8;
        }

        for (byte b : temp) {
            byteArrayOutputStream.write(b);
        }
    }
}
